// Generated by CoffeeScript 2.3.1
(function() {
  var code, end, fs, gen, path, start, style;
  gen = function() {
    var add, allSelectors, as, code, col, genPrefix, genSize, indent, j, k, l, m, maxOrd, n, num, o, ord, p, pos, ref, ref1, ref2, rules, scale, size, sizes, sz, tn;
    indent = function(i, code) {
      return code.split("\n").map(function(row) {
        return i + row;
      }).join("\n");
    };
    sizes = {
      esm: "max-width: 576px",
      sm: "min-width: 576px) and (max-width: 767px",
      md: "min-width: 768px) and (max-width: 991px",
      lg: "min-width: 992px) and (max-width: 1199px",
      xl: "min-width: 1200px"
    };
    rules = [];
    add = function(selectors, code) {
      return rules.push({selectors, code});
    };
    //####################
    //#### CONTAINER #####
    //####################
    add(["cont", "row"], "padding: 0;\nmargin: 0;\ndisplay: flex;\nflex-direction: row;\nflex-wrap: wrap;\nwidth: 100%;\nposition: relative;\nbox-sizing: border-box;");
    add(["column"], "padding: 0;\nmargin: 0;\ndisplay: flex;\nflex-direction: column;\nflex-wrap: wrap;\nwidth: 100%;\nposition: relative;\nbox-sizing: border-box;");
//###############################
//#### COLUMN, ROW AND ABS ######
//###############################

// TODO: row width
    for (col = j = 1; j <= 12; col = ++j) {
      for (sz = k = 1, ref = col; (1 <= ref ? k <= ref : k >= ref); sz = 1 <= ref ? ++k : --k) {
        if (sz === 1) {
          scale = "100%/" + col;
        } else if (sz === col) {
          scale = "100%";
        } else {
          scale = "100%/" + col + "*" + sz;
        }
        if (sz === 1) {
          add(["col-" + col], "width: calc(" + scale + ");\nalign-self: start;\nmargin-left: 0;\nmargin-right: 0;");
          add(["row-" + col], "height: calc(" + scale + ");\nalign-self: start;\nmargin-top: 0;\nmargin-bottom: 0;");
        }
        add(["col-" + col + "-" + sz], "width: calc(" + scale + ");\nalign-self: start;\nmargin-left: 0;\nmargin-right: 0;");
        add(["row-" + col + "-" + sz], "width: calc(" + scale + ");\nalign-self: start;\nmargin-top: 0;\nmargin-bottom: 0;");
      }
    }
    for (col = l = 1; l <= 12; col = ++l) {
      for (sz = m = 1, ref1 = col; (1 <= ref1 ? m <= ref1 : m >= ref1); sz = 1 <= ref1 ? ++m : --m) {
        pos = "100%/" + col + "*" + sz;
        add(["offset-col-" + col + "-" + sz], "margin-left: calc(" + pos + ");");
        add(["offset-row-" + col + "-" + sz], "margin-top: calc(" + pos + ");");
      }
    }
    for (num = n = 1; n <= 10; num = ++n) {
      for (tn = o = 0; o <= 9; tn = ++o) {
        add(["height-col-" + num + "-" + tn], "position: relative;");
        add(["height-col-" + num + "-" + tn + ":before"], "content: '';\ndisplay: block;\npadding-top: calc(100%*" + (num + tn / 10) + ");");
        add(["height-col-" + num + "-" + tn + " > *"], "position: absolute;\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;");
      }
    }
    //######################
    //#### MIN AND MAX #####
    //######################

    //################
    //#### ORDER #####
    //################
    maxOrd = 15;
    for (ord = p = 1, ref2 = maxOrd; (1 <= ref2 ? p <= ref2 : p >= ref2); ord = 1 <= ref2 ? ++p : --p) {
      add(["order-" + ord], "order: " + ord + ";");
    }
    add(["order-first"], "order: -1;");
    add(["order-last"], "order: " + (maxOrd + 1) + ";");
    //################
    //#### FLUID #####
    //################
    add(["fluid"], "flex: 1;");
    //################
    //#### ALIGN #####
    //################
    add(["align-self-start"], "align-self: start;");
    add(["align-self-center"], "align-self: center;");
    add(["align-self-end"], "align-self: end;");
    add(["justify-content-start"], "justify-content: start;");
    add(["justify-content-center"], "justify-content: center;");
    add(["justify-content-end"], "justify-content: end;");
    add(["justify-content-around"], "justify-content: space-around;");
    add(["justify-content-between"], "justify-content: space-between;");
    //#################
    //#### CENTER #####
    //#################
    add(["cont-vertical-center", "cont-v-center", "cont-center"], "display: flex;\nflex-direction: row;\nalign-items: center;");
    add(["cont-horizontal-center", "cont-h-center", "cont-center"], "display: flex;\nflex-direction: row;\njustify-content: center;");
    //##################
    //#### VISIBLE #####
    //##################
    add(["invisible", "display-none"], "display: none;");
    add(["display-block"], "display: block;");
    add(["display-flex"], "display: flex;");
    add(["display-inline-block"], "display: inline-block;");
    add(["display-inline-flex"], "display: inline-flex;");
    //###############
    //#### CODE #####
    //###############
    allSelectors = [];
    genPrefix = function(prefix, {selectors, code}) {
      var sels;
      sels = selectors.map(function(selector) {
        var r;
        r = "." + prefix + selector;
        allSelectors.push(r);
        return r;
      }).join(", ");
      return sels + " {\n" + indent("\t", code) + "\n}";
    };
    genSize = function(size, rules) {
      var inner;
      inner = rules.map(function(rule) {
        return genPrefix(size + "-", rule);
      }).join("\n");
      inner = "@media (" + sizes[size] + ") {\n" + indent("\t", inner);
      inner += "\n}";
      return inner;
    };
    code = rules.map(function(rule) {
      return genPrefix("", rule);
    }).join("\n");
    code += "\n";
    for (size in sizes) {
      code += genSize(size, rules);
      code += "\n";
    }
    //### BOX SIZING ####
    as = allSelectors.join(", ");
    code += "\n" + as + " {\nbox-sizing: border-box;\n}";
    return code;
  };
  start = new Date;
  //### GENERATE ####
  code = gen();
  if (typeof window !== "undefined" && window !== null) {
    style = document.createElement("style");
    style.innerHTML = code;
    style.type = "text/css";
    document.head.appendChild(style);
    end = new Date() - start;
    return console.log("laykit deployed in " + end + "ms");
  } else {
    fs = require("fs");
    path = require("path");
    fs.writeFileSync(path.join(__dirname, "laykit.css"), code);
    end = new Date() - start;
    return console.log("laykit compiled in " + end + "ms");
  }
})();

// todo: cancel
