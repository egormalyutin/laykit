// Generated by CoffeeScript 2.3.1
(function() {
  var code, end, gen, start, style;
  gen = function() {
    var add, code, col, genPrefix, genSize, indent, j, k, l, m, pos, ref, ref1, rules, scale, size, sizes, sz;
    indent = function(i, code) {
      return code.split("\n").map(function(row) {
        return i + row;
      }).join("\n");
    };
    sizes = {
      esm: "max-width: 576px",
      sm: "min-width: 576px",
      md: "min-width: 768px",
      lg: "min-width: 992px",
      xl: "min-width: 1200px"
    };
    rules = [];
    add = function(selectors, code) {
      return rules.push({selectors, code});
    };
    //#################
    //#### CENTER #####
    //#################
    add(["cont-vertical-center", "cont-v-center", "cont-center"], "display: flex;\nflex-direction: row;\nalign-items: center;");
    add(["cont-horizontal-center", "cont-h-center", "cont-center"], "display: flex;\nflex-direction: row;\njustify-content: center;");
    //####################
    //#### CONTAINER #####
    //####################
    add(["cont"], "display: flex;\nposition: relative;");
//###############################
//#### COLUMN, ROW AND ABS ######
//###############################
    for (col = j = 1; j <= 12; col = ++j) {
      for (sz = k = 1, ref = col; (1 <= ref ? k <= ref : k >= ref); sz = 1 <= ref ? ++k : --k) {
        if (sz === 1) {
          scale = "100%/" + col;
        } else if (sz === col) {
          scale = "100%";
        } else {
          scale = "100%/" + col + "*" + sz;
        }
        if (sz === 1) {
          add(["col-" + col], "display: inline-block;\nwidth: calc(" + scale + ");\nmargin-left: 0;\nmargin-right: 0;");
          add(["row-" + col], "display: inline-block;\nheight: calc(" + scale + ");\nmargin-top: 0;\nmargin-bottom: 0;");
        }
        add(["col-" + col + "-" + sz], "display: inline-block;\nwidth: calc(" + scale + ");\nmargin-left: 0;\nmargin-right: 0;");
        add(["row-" + col + "-" + sz], "display: inline-block;\nwidth: calc(" + scale + ");\nmargin-top: 0;\nmargin-bottom: 0;");
      }
    }
    for (col = l = 1; l <= 12; col = ++l) {
      for (sz = m = 1, ref1 = col; (1 <= ref1 ? m <= ref1 : m >= ref1); sz = 1 <= ref1 ? ++m : --m) {
        pos = "100%/" + col + "*" + sz;
        add(["offset-col-" + col + "-" + sz], "margin-left: calc(" + pos + ");");
        add(["offset-row-" + col + "-" + sz], "margin-top: calc(" + pos + ");");
      }
    }
    //###############
    //#### CODE #####
    //###############
    genPrefix = function(prefix, {selectors, code}) {
      var sels;
      sels = selectors.map(function(selector) {
        return "." + prefix + selector;
      }).join(", ");
      return sels + " {\n" + indent("\t", code) + "\n}";
    };
    genSize = function(size, rules) {
      var inner;
      inner = rules.map(function(rule) {
        return genPrefix(size + "-", rule);
      }).join("\n");
      inner = "@media (" + sizes[size] + ") {\n" + indent("\t", inner);
      inner += "\n}";
      return inner;
    };
    code = rules.map(function(rule) {
      return genPrefix("", rule);
    }).join("\n");
    code += "\n";
    for (size in sizes) {
      code += genSize(size, rules);
      code += "\n";
    }
    return code;
  };
  //### GENERATE ####
  start = new Date;
  code = gen();
  end = new Date() - start;
  console.log("laykit deployed in " + end + "ms");
  //### ADD ####
  style = document.createElement("style");
  style.innerHTML = code;
  style.type = "text/css";
  return document.head.appendChild(style);
})();

// todo: cancel
